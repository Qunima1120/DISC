knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
ds_dir = "./data/PBMC/ds_0.3/r2"
observed_path = paste0(ds_dir, "/observed.loom")
observed_data = readh5_loom(observed_path)
acc_result = rep(NA, length(cell_type_identification_result_list))
unique_cell_type = unique(cell_type)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
ds_dir = "./data/PBMC/ds_0.3/r2"
observed_path = paste0(ds_dir, "/observed.loom")
observed_data = readh5_loom(observed_path)
gene_filter = gene_selection(observed_data, 10)
observed_filt = observed_data[gene_filter, ]
DISC_values = readh5_loom(paste0(ds_dir, "/DISC.loom"))[gene_filter, ]
DISC_features = readh5_feature(paste0(ds_dir, "/DISC_feature.hdf5"))
cell_type = readRDS("./data/PBMC/cell_type.rds")
cell_type_identification_result_list = list()
cell_type_identification_result_list[["Observed"]] = seurat_classification(gene_bc_mat = observed_filt, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type_identification_result_list[["DISC"]] = seurat_classification(gene_bc_mat = DISC_values, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type_identification_result_list[["DISC_feature"]] = seurat_classification(gene_bc_mat = DISC_values, feature_bc_mat = DISC_features, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
dim(DISC_values)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
raw_data = readh5_loom("./data/PBMC/raw.loom")
cell_type = readRDS("./data/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3/r2"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
stop(paste0("Please run imputation using ", observed_path, " first."))
}else{
observed_data = readh5_loom(observed_path)
}
gene_filter = gene_selection(observed_data, 10)
data_list = list(Raw = raw_data[gene_filter, ], Observed = observed_data[gene_filter, ])
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_loom(paste0(ds_dir, "/DISC.loom"))[gene_filter, ]
data_list[["scImpute"]] = readh5_imputation(paste0(ds_dir, "/scImpute.hdf5"))
data_list[["VIPER"]] = readh5_imputation(paste0(ds_dir, "/VIPER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["DeepImpute"]] = readh5_imputation(paste0(ds_dir, "/DeepImpute.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
for(ii in data_list){
print(dim(ii))
}
cell_type_identification_result_list = list()
for(ii in names(data_list)){
print(ii)
cell_type_identification_result_list[[ii]] = seurat_classification(gene_bc_mat = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show_plots = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
raw_data = readh5_loom("./data/PBMC/raw.loom")
cell_type = readRDS("./data/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3/r2"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
stop(paste0("Please run imputation using ", observed_path, " first."))
}else{
observed_data = readh5_loom(observed_path)
}
gene_filter = gene_selection(observed_data, 10)
data_list = list(Raw = raw_data[gene_filter, ], Observed = observed_data[gene_filter, ])
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_loom(paste0(ds_dir, "/DISC.loom"))[gene_filter, ]
data_list[["scImpute"]] = readh5_imputation(paste0(ds_dir, "/scImpute.hdf5"))
data_list[["VIPER"]] = readh5_imputation(paste0(ds_dir, "/VIPER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["DeepImpute"]] = readh5_imputation(paste0(ds_dir, "/DeepImpute.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
for(ii in data_list){
print(dim(ii))
}
cell_type_identification_result_list = list()
for(ii in names(data_list)){
print(ii)
cell_type_identification_result_list[[ii]] = seurat_classification(gene_bc_mat = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show_plots = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
ds_dir = "./data/PBMC/ds_0.3/r2"
observed_path = paste0(ds_dir, "/observed.loom")
observed_data = readh5_loom(observed_path)
gene_filter = gene_selection(observed_data, 10)
observed_filt = observed_data[gene_filter, ]
DISC_values = readh5_loom(paste0(ds_dir, "/DISC.loom"))[gene_filter, ]
DISC_features = readh5_feature(paste0(ds_dir, "/DISC_feature.hdf5"))
cell_type = readRDS("./data/PBMC/cell_type.rds")
cell_type_identification_result_list = list()
cell_type_identification_result_list[["Observed"]] = seurat_classification(gene_bc_mat = observed_filt, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type_identification_result_list[["DISC"]] = seurat_classification(gene_bc_mat = DISC_values, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type_identification_result_list[["DISC_feature"]] = seurat_classification(gene_bc_mat = DISC_values, feature_bc_mat = DISC_features, cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
pheatmap(melt(jaccard_mat), scale = "none", color = colorRampPalette(colors = c("white","yellow","red"))(100),
cluster_rows = FALSE, cluster_cols = FALSE, display_numbers = TRUE, labels_col=1)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
library(pheatmap)
pheatmap(melt(jaccard_mat), scale = "none", color = colorRampPalette(colors = c("white","yellow","red"))(100),
cluster_rows = FALSE, cluster_cols = FALSE, display_numbers = TRUE, labels_col=1)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
library(pheatmap)
pheatmap(jaccard_mat, scale = "none", color = colorRampPalette(colors = c("white", "yellow", "red"))(100),
cluster_rows = FALSE, cluster_cols = FALSE, display_numbers = TRUE, labels_col=1)
cell_type_heatmap = function(method_type_mat, title){
plot_df = melt(method_type_mat)
ggplot(data = plot_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Cell Type", y = "Method") + theme_classic() +
scale_fill_gradient(low = "white", mid = "yellow", high = "red") + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(plot_df$Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap = function(method_type_mat, title){
plot_df = melt(method_type_mat)
ggplot(data = plot_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Cell Type", y = "Method") + theme_classic() +
scale_fill_gradient2(low = "white", mid = "yellow", high = "red") + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(plot_df$Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
cell_type_heatmap = function(method_type_mat, title){
plot_df = melt(method_type_mat)
ggplot(data = plot_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Cell Type", y = "Method") + theme_classic() +
scale_fill_gradientn(colors = colorRampPalette(colors = c("yellow","white","red"))(100)) + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(plot_df$Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
cell_type_heatmap = function(method_type_mat, title){
plot_df = melt(method_type_mat)
ggplot(data = plot_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Cell Type", y = "Method") + theme_classic() +
scale_fill_gradientn(colors = colorRampPalette(colors = c("white", "yellow", "red"))(100)) + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(plot_df$Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
raw_data = readh5_loom("./data/PBMC/raw.loom")
cell_type = readRDS("./data/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3/r2"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
stop(paste0("Please run imputation using ", observed_path, " first."))
}else{
observed_data = readh5_loom(observed_path)
}
gene_filter = gene_selection(observed_data, 10)
data_list = list(Raw = raw_data[gene_filter, ], Observed = observed_data[gene_filter, ])
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_loom(paste0(ds_dir, "/DISC.loom"))[gene_filter, ]
data_list[["scImpute"]] = readh5_imputation(paste0(ds_dir, "/scImpute.hdf5"))
data_list[["VIPER"]] = readh5_imputation(paste0(ds_dir, "/VIPER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["DeepImpute"]] = readh5_imputation(paste0(ds_dir, "/DeepImpute.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
for(ii in data_list){
print(dim(ii))
}
cell_type_identification_result_list = list()
for(ii in names(data_list)){
print(ii)
cell_type_identification_result_list[[ii]] = seurat_classification(gene_bc_mat = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show_plots = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
