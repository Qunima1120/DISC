color_point = c("#31a354", "#a63603")
names(color_point) = example_gene
outfile = paste0(outdir, "/Gini.pdf")
mfrow = make_mfrow(2, length(method_names))
#pdf(outfile, height = mfrow[1] * 3.75, width = mfrow[2] * 3.25)
gini_rmse = layout_scatter(gini_result_list, method_names, use_genes, color_point = color_point, this_xlab = "FISH Gini", this_ylab = "scRNA-seq Gini", xlim = c(0, 1), ylim = c(0, 1))
#dev.off()
saveRDS(gini_result_list, paste0(outdir, "/gini_result_list.rds"))
par(mfrow = c(1, 1))
barplot_usage(gini_rmse, main = "Gini RMSE", bar_color = bar_color, text_color = text_color, use_data_order = T)
plot_genes = use_genes
ks_matrix = matrix(nrow = length(plot_genes), ncol = length(method_names), dimnames = list(plot_genes, method_names))
mfrow = c(3, 6)
outfile = paste0(outdir, "/density.pdf")
#pdf(outfile, height = mfrow[1] * 3, width = mfrow[2] * 2.75)
par(mfrow = mfrow)
for(ii in plot_genes){
this_fish = saver_style_filt_norm_list[["FISH"]][ii, ]
this_fish = this_fish[!is.na(this_fish)]
fish_density = density(this_fish)
zero_proportion = round(100 * (1 - sum(dataset_list[["Raw"]][ii, ] > 0) / length(used_cells)), digits = 4)
xlim_max = as.numeric(quantile(this_fish, 0.90)) * 2
dens.bw = fish_density$bw
ylim_max = max(fish_density$y)
use_density = list()
for(method_index in 1:length(method_names)){
this_method_expression = saver_style_filt_norm_list[[method_names[method_index]]][ii, ]
if(length(unique(this_method_expression)) == 1){
this_method_expression[1] = this_method_expression[1] * 1.0001
}
#if(method_index <= 2){
if(T){
this_density = density(this_method_expression, bw = dens.bw)
use_density[[method_names[method_index]]] = this_density
ylim_max = max(c(ylim_max, this_density$y))
}
ks_matrix[ii, method_index] = ks.test(delete_lt0.5(this_method_expression), delete_lt0.5(this_fish))$statistic
}
plot(fish_density, lwd = 2, col = "black", lty = 1,
xlim = c(min(fish_density$x, 0), xlim_max + 5),
ylim = c(0, ylim_max), yaxt = "s", bty="n",
main = paste0(firstup(ii), " (", zero_proportion, "%)"),
sub = "", ylab = "Density", xlab = "mRNA Counts")
par(las = 0)
for(this_density_name in names(use_density)){
lines(use_density[[this_density_name]], lwd = 3, col=method_color[this_density_name])
}
if(ii %in% plot_genes[mfrow[2] + (mfrow[1] * mfrow[2] * seq(0, floor(length(plot_genes) / mfrow[1] * mfrow[2])))]){
legend("topright", c("FISH", names(use_density)), lty = rep(1, 1 + length(names(use_density))),
lwd = rep(3, 1 + length(names(use_density))), col = c("black", method_color[names(use_density)]), box.lty = 0, xjust = 1, yjust = 1)
}
}
#dev.off()
outfile = paste0(outdir, "/density_summary.pdf")
#pdf(outfile, height = 6, width = ncol(ks_matrix) * 0.6)
ks_mean = Matrix::colMeans(ks_matrix)
standard_error_ks = apply(ks_matrix, 2, function(x) sqrt(var(x)/length(x)))
par(mfrow = c(1, 1))
barplot_usage(ks_mean, main = "K-S Statistic", bar_color = bar_color, text_color = text_color, use_data_order = T, standard_error = standard_error_ks)
#dev.off()
# Make the plots
dist_outdir = paste0(outdir, "/2d_distribution")
dir.create(dist_outdir, showWarnings = F)
mfrow = make_mfrow(2, length(c("FISH", method_names)))
pairs_2d_distribution = cor_mat[order(abs(cor_mat[, 3]), decreasing = TRUE), ]
library(parallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("dist_outdir", "text_color", "bar_color", "max_points", "rescale_mean_list", "method_names", "used_cells", "mfrow", "fish_gene_mat", "fish_mask_mat", "dataset_list", "utilities_path"))
return_list = parLapply(cl, 1:sum(fish_mask), function(ii){
source(utilities_path)
gene_x = fish_gene_mat[t(fish_mask_mat)][ii]
gene_y = t(fish_gene_mat)[t(fish_mask_mat)][ii]
x_dropout_rate = round(100 * (1 - sum(dataset_list[["Raw"]][gene_x, ] > 0) / length(used_cells)), digits = 4)
y_dropout_rate = round(100 * (1 - sum(dataset_list[["Raw"]][gene_y, ] > 0) / length(used_cells)), digits = 4)
x_fish_raw = dataset_list[["FISH"]][gene_x, ]
y_fish_raw = dataset_list[["FISH"]][gene_y, ]
select_cell = !is.na(x_fish_raw) & !is.na(y_fish_raw)
x_fish = x_fish_raw[select_cell]
y_fish = y_fish_raw[select_cell]
fish_pair_mat = matrix(c(x_fish, y_fish), ncol = 2)
ks_stat = c()
corr_score = cor(x_fish, y_fish)
x_i = list(FISH = x_fish)
y_i = list(FISH = y_fish)
for(jj in 1:length(method_names)){
method_name = method_names[jj]
x_i[[method_name]] = rescale_mean_list[[method_name]][gene_x, ]
y_i[[method_name]] = rescale_mean_list[[method_name]][gene_y, ]
ks_stat = c(ks_stat, ks2d2s(round(x_fish), round(y_fish), round(x_i[[method_name]]), round(y_i[[method_name]])))
corr_score = c(corr_score, cor(x_i[[method_name]], y_i[[method_name]]))
}
names(corr_score) = c("FISH", method_names)
names(ks_stat) = method_names
this_name = c(paste(gene_x, gene_y, sep = "_"))
pdf(paste0(dist_outdir, "/", this_name, ".pdf"),
height = mfrow[1] * 4,
width = mfrow[2] * 3.75)
par(mfrow = mfrow)
nbin = 128
x_fish_95 = quantile(x_fish, 0.95) + 1### R is from 1 to max + 1
y_fish_95 = quantile(y_fish, 0.95) + 1
for(jj in c("FISH", method_names)){
if(jj == "DISC"){
col.main = "red"
}else{
col.main = "black"
}
if(jj == "Raw"){
x_use = dataset_list[[jj]][gene_x, ]
y_use = dataset_list[[jj]][gene_y, ]
xlim = c(0, max(x_use))
ylim = c(0, max(y_use))
bandwidth = c(xlim[2] / nbin, ylim[2] / nbin)
}else{
x_use = x_i[[jj]]
y_use = y_i[[jj]]
xlim = c(0, x_fish_95)
ylim = c(0, y_fish_95)
bandwidth = c(max(x_fish) / nbin, max(y_fish) / nbin)
}
smoothScatter1(x = x_use, y = y_use,
xlab = paste0(gene_x, " (", x_dropout_rate, "%)"),
ylab = paste0(gene_y, " (", y_dropout_rate, "%)"),
cex = 1.5, xlim = xlim, ylim = ylim,
lwd = 2, main = paste0(jj, " - FF = ", round(ks_stat[jj], 4)),
nrpoints = 0, col.main = col.main, nbin = nbin, bandwidth = bandwidth)
}
dev.off()
return(list("ks_stat" = matrix(ks_stat, nrow = 1, dimnames = list(paste(gene_x, gene_y, sep = " - "), c())),
"corr_score" = matrix(corr_score, nrow = 1, dimnames = list(paste(gene_x, gene_y, sep = " - "), c()))))
})
stopCluster(cl)
ks_stat_mat = matrix(nrow = 0, ncol = length(method_names), dimnames = list(c(), method_names))
corr_mat = matrix(nrow = 0, ncol = length(method_names) + 1, dimnames = list(c(), c("FISH", method_names)))
for(ii in return_list){
ks_stat_mat = rbind(ks_stat_mat, ii$ks_stat)
corr_mat = rbind(corr_mat, ii$corr_score)
}
saveRDS(ks_stat_mat, paste(outdir, "/ks_stat_mat.rds", sep = ""))
###all_compare
mean_ks_stat = Matrix::colMeans(ks_stat_mat)
standard_error_ks_stat = apply(ks_stat_mat, 2, function(x) sqrt(var(x)/length(x)))
outfile = paste(outdir, "/score_compare.pdf", sep = "")
#pdf(outfile, height = 5, width = 11)
par(mfrow = c(1, 2))
barplot_usage(mean_ks_stat, main = "Fasano and\nFranceschini's Test", cex.main = 1.5,bar_color = bar_color, text_color = text_color, use_data_order = T, standard_error = standard_error_ks_stat)
corr_rmse = sapply(method_names, function(x) rmse(corr_mat[, "FISH"], corr_mat[, x]))
barplot_usage(corr_rmse, main = "FISH - Impute\nCorrelation RMSE", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T)
#dev.off()
outfile = paste(outdir, "/Bar_plot.pdf", sep = "")
#pdf(outfile, height = 3, width = 9.5)
plot_height = 4
plot_width = 3.5
plot_region = matrix(seq(3), nrow = 1)
this_height = rep(plot_height, nrow(plot_region))
this_width = rep(plot_width, ncol(plot_region))
this_index = max(plot_region) + 1
layout_mat = plot_region
xlab_region = matrix(rep(this_index, ncol(plot_region)), nrow = 1)
layout_mat = rbind(layout_mat, xlab_region)
this_height = c(this_height, 0.5)
layout(mat = layout_mat, heights = this_height, widths = this_width)
par(mar = c(1, 4.1, 4.1, 2.1))
barplot_usage(cmd_vector, main = "CMD", bar_color = method_color, use_data_order = T, use_border = F)
barplot_usage(gini_rmse, main = "Gini RMSE", bar_color = method_color, use_data_order = T, use_border = F)
barplot_usage(mean_ks_stat, main = "Fasano and\nFranceschini's Test", cex.main = 1.5, bar_color = method_color, use_data_order = T, standard_error = standard_error_ks_stat, use_border = F)
par(mar = rep(0, 4))
plot(1, type = "n", axes = FALSE, xlab="", ylab="")
legend(x = "top",inset = 0, legend = names(method_color), fill = method_color, horiz = TRUE, border = NA, bty = "n")
#dev.off()
output_list = list()
output_list[["cmd"]] = cmd_vector
output_list[["gini_rmse"]] = gini_rmse
output_list[["mean_ks_stat"]] = mean_ks_stat
output_list[["standard_error_ks_stat"]] = standard_error_ks_stat
saveRDS(output_list, paste(outdir, "/Bar_stat.rds", sep = ""))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
raw_data = readh5_loom("./data/MELANOMA/raw.loom")
ds_dir = "./data/MELANOMA/ds_0.5"
dir.create(ds_dir, showWarnings = F, recursive = T)
output_dir = "./results/MELANOMA/ds_0.5"
dir.create(output_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.5, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
raw_data = readh5_loom("./data/MELANOMA/raw.loom")
ds_dir = "./data/MELANOMA/ds_0.5"
dir.create(ds_dir, showWarnings = F, recursive = T)
output_dir = "./results/MELANOMA/ds_0.5"
dir.create(output_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.5, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["scImpute"]] = readh5_imputation(paste0(ds_dir, "/scImpute.hdf5"))
data_list[["VIPER"]] = readh5_imputation(paste0(ds_dir, "/VIPER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["deepImpute"]] = readh5_imputation(paste0(ds_dir, "/deepImpute.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
method_names = setdiff(names(data_list), "Raw")
method_color = c("gray80", "#FF0000", "#000080", "#BFBF00", "#408000", "#804000", "#00FF00", "#FF8000", "#FF00FF", "#00FFFF")
names(method_color) = method_names
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
MAE_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(c(), method_names))
ls_raw = colSums(data_list[["Raw"]])
for(ii in method_names){
ls_this = colSums(data_list[[ii]])
scale_factor = ls_raw / ls_this
MAE_cell = sapply(seq(cell_number), function(x){
expressed_mask = data_list[["Raw"]][, x] > 0
expressed_number = sum(expressed_mask)
error = data_list[["Raw"]][expressed_mask, x] - (data_list[[ii]][expressed_mask, x] * scale_factor[x])
return(sum(abs(error)) / expressed_number)
})
MAE_mat[, ii] = MAE_cell
print(ii)
}
MAE_mat = MAE_mat[rowSums(is.na(MAE_mat)) < 1, ]
MAE_df = melt(t(MAE_mat))
MAE_levels = colnames(MAE_mat)[c(1, order(colMeans(MAE_mat)[-1], decreasing = F) + 1)]
ggplot(MAE_df, aes(x = factor(Var1, levels = MAE_levels), y = value, fill = factor(Var1, levels = MAE_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(MAE_mat, 2, quantile, 0.1)), max(apply(MAE_mat, 2, quantile, 0.9))) + theme_classic() +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
legend.position = "none")
ggplot(MAE_df, aes(x = factor(Var1, levels = MAE_levels), y = value, fill = factor(Var1, levels = MAE_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(MAE_mat, 2, quantile, 0.1)), max(apply(MAE_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="Method", y="MAE") + scale_fill_manual(values=bar_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
legend.position = "none")
ggplot(MAE_df, aes(x = factor(Var1, levels = MAE_levels), y = value, fill = factor(Var1, levels = MAE_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(MAE_mat, 2, quantile, 0.1)), max(apply(MAE_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="Method", y="MAE") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
legend.position = "none")
method_color
CMD_output_dir = paste0(output_dir, "/CMD")
dir.create(CMD_output_dir, showWarnings = F, recursive = T)
vst_file = paste0(CMD_output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(CMD_output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(ii in names(data_list)){
if(ii == "Raw"){
cor_all[[ii]] = calc_cor_mat(data_list[[ii]][used_feature_genes, ])
}else{
cor_all[[ii]] = list()
for(jj in repeats){
cor_all[[ii]] = calc_cor_mat(delete_lt0.5(data_list[[ii]][[jj]])[used_feature_genes, ])
}
}
print(ii)
}
CMD_output_dir = paste0(output_dir, "/CMD")
dir.create(CMD_output_dir, showWarnings = F, recursive = T)
vst_file = paste0(CMD_output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(CMD_output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(ii in names(data_list)){
if(ii == "Raw"){
cor_all[[ii]] = calc_cor_mat(data_list[[ii]][used_feature_genes, ])
}else{
cor_all[[ii]] = calc_cor_mat(delete_lt0.5(data_list[[ii]][[jj]])[used_feature_genes, ])
}
print(ii)
}
CMD_output_dir = paste0(output_dir, "/CMD")
dir.create(CMD_output_dir, showWarnings = F, recursive = T)
vst_file = paste0(CMD_output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(CMD_output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(ii in names(data_list)){
if(ii == "Raw"){
cor_all[[ii]] = calc_cor_mat(data_list[[ii]][used_feature_genes, ])
}else{
cor_all[[ii]] = calc_cor_mat(delete_lt0.5(data_list[[ii]])[used_feature_genes, ])
}
print(ii)
}
saveRDS(cor_all, paste0(CMD_output_dir, "/cor_all.rds"))
cmd_value = c()
for(ii in method_names){
cmd_value = c(cmd_value, calc_cmd(cor_all[["Raw"]], cor_all[[ii]]))
}
barplot_usage(cmd_value, main = "", cex.main = 1.5, bar_color = method_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
barplot_usage(cmd_value, main = "", cex.main = 1.5, bar_color = method_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
barplot_usage(cmd_value, main = "", cex.main = 1.5, bar_color = method_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), use_border = F)
text_color
barplot_usage
cmd_value
names(cmd_value) = method_names
CMD_output_dir = paste0(output_dir, "/CMD")
dir.create(CMD_output_dir, showWarnings = F, recursive = T)
vst_file = paste0(CMD_output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(CMD_output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(ii in names(data_list)){
if(ii == "Raw"){
cor_all[[ii]] = calc_cor_mat(data_list[[ii]][used_feature_genes, ])
}else{
cor_all[[ii]] = calc_cor_mat(delete_lt0.5(data_list[[ii]])[used_feature_genes, ])
}
print(ii)
}
saveRDS(cor_all, paste0(CMD_output_dir, "/cor_all.rds"))
cmd_value = c()
for(ii in method_names){
cmd_value = c(cmd_value, calc_cmd(cor_all[["Raw"]], cor_all[[ii]]))
}
names(cmd_value) = method_names
barplot_usage(cmd_value, main = "", cex.main = 1.5, bar_color = method_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), use_border = F)
gene_corr_mat = matrix(nrow = gene_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
gene_corr_mat[, ii] = rowMeans(calc_corr(data_list[["Raw"]], data_list[[ii]][[jj]], "gene"))
print(ii)
}
gene_corr_mat = matrix(nrow = gene_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
gene_corr_mat[, ii] = rowMeans(calc_corr(data_list[["Raw"]], data_list[[ii]], "gene"))
print(ii)
}
gene_corr_mat = matrix(nrow = gene_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
gene_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]], "gene")
print(ii)
}
gene_corr_mat = gene_corr_mat[rowSums(is.na(gene_corr_mat)) < 1, ]
ggplot(MAE_df, aes(x = factor(Var1, levels = MAE_levels), y = value, fill = factor(Var1, levels = MAE_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(MAE_mat, 2, quantile, 0.1)), max(apply(MAE_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="MAE") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
legend.position = "none")
ggplot(MAE_df, aes(x = factor(Var1, levels = MAE_levels), y = value, fill = factor(Var1, levels = MAE_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(MAE_mat, 2, quantile, 0.1)), max(apply(MAE_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="MAE") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
ggplot(gene_corr_df, aes(x = factor(Var1, levels = gene_corr_levels), y = value, fill = factor(Var1, levels = gene_corr_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(gene_corr_mat, 2, quantile, 0.1)), max(apply(gene_corr_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="Gene correlation with reference") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
gene_corr_mat = matrix(nrow = gene_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
gene_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]], "gene")
print(ii)
}
gene_corr_mat = gene_corr_mat[rowSums(is.na(gene_corr_mat)) < 1, ]
gene_corr_df = melt(t(gene_corr_mat))
gene_corr_levels = colnames(gene_corr_mat)[c(1, order(colMeans(gene_corr_mat)[-1], decreasing = F) + 1)]
ggplot(gene_corr_df, aes(x = factor(Var1, levels = gene_corr_levels), y = value, fill = factor(Var1, levels = gene_corr_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(gene_corr_mat, 2, quantile, 0.1)), max(apply(gene_corr_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="Gene correlation with reference") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
cell_corr_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
cell_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]][[jj]], "cell")
print(ii)
}
cell_corr_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
cell_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]], "cell")
print(ii)
}
cell_corr_mat = cell_corr_mat[rowSums(is.na(cell_corr_mat)) < 1, ]
cell_corr_df = melt(t(cell_corr_mat))
cell_corr_levels = colnames(cell_corr_mat)[c(1, order(colMeans(cell_corr_mat)[-1], decreasing = F) + 1)]
ggplot(cell_corr_df, aes(x = factor(Var1, levels = cell_corr_levels), y = value, fill = factor(Var1, levels = cell_corr_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(cell_corr_mat, 2, quantile, 0.1)), max(apply(cell_corr_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="Cell correlation with reference") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
gene_corr_mat = matrix(nrow = gene_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
gene_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]], "gene")
print(ii)
}
gene_corr_mat = gene_corr_mat[rowSums(is.na(gene_corr_mat)) < 1, ]
gene_corr_df = melt(t(gene_corr_mat))
gene_corr_levels = colnames(gene_corr_mat)[c(1, order(colMeans(gene_corr_mat)[-1], decreasing = T) + 1)]
ggplot(gene_corr_df, aes(x = factor(Var1, levels = gene_corr_levels), y = value, fill = factor(Var1, levels = gene_corr_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(gene_corr_mat, 2, quantile, 0.1)), max(apply(gene_corr_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="Gene correlation with reference") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
cell_corr_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(ii in method_names){
cell_corr_mat[, ii] = calc_corr(data_list[["Raw"]], data_list[[ii]], "cell")
print(ii)
}
cell_corr_mat = cell_corr_mat[rowSums(is.na(cell_corr_mat)) < 1, ]
cell_corr_df = melt(t(cell_corr_mat))
cell_corr_levels = colnames(cell_corr_mat)[c(1, order(colMeans(cell_corr_mat)[-1], decreasing = T) + 1)]
ggplot(cell_corr_df, aes(x = factor(Var1, levels = cell_corr_levels), y = value, fill = factor(Var1, levels = cell_corr_levels))) +
geom_boxplot(outlier.shape = NA) + stat_boxplot(geom = "errorbar", width = 0.3) +
ylim(min(apply(cell_corr_mat, 2, quantile, 0.1)), max(apply(cell_corr_mat, 2, quantile, 0.9))) + theme_classic() +
labs(x="", y="Cell correlation with reference") + scale_fill_manual(values=method_color) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold"),
axis.title.y = element_text(size = 15, face = "bold"),
legend.position = "none")
