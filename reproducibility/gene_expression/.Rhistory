saveRDS(cor_all, paste0(output_dir, "/cor_all.rds"))
cmd_result = c()
for(method in method_names){
cmd_result = c(cmd_result, calc_cmd(cor_all[["Raw"]], cor_all[[method]]))
}
names(cmd_result) = method_names
print(cmd_result)
saveRDS(cmd_mat, paste0(output_dir, "/cmd.rds"))
output_dir = paste0(ds_dir, "CMD")
dir.create(output_dir, showWarnings = F, recursive = T)
vst_file = paste0(output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(method in names(data_list)){
cor_all[[method]] = matrix(nrow = length(used_feature_genes), ncol = length(used_feature_genes), dimnames = list(used_feature_genes, used_feature_genes))
this_mat = delect_lt0.5(data_list[[method]])[used_feature_genes, ]
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("this_mat", "method"))
return_list = parLapply(cl, seq(nrow(this_mat) - 1), function(x){
return_vector = rep(NA, nrow(this_mat) - x)
ii_express = this_mat[x, ]
ii_mask = ii_express > 0
for(jj in (x + 1):nrow(this_mat)){
jj_express = this_mat[jj, ]
if(method %in% c("")){
express_mask = rep(T, length(ii_mask))
}else{
express_mask = ii_mask | jj_express > 0
}
if(sum(express_mask) > 0){
this_corr = cor(ii_express[express_mask], jj_express[express_mask], use = "pairwise.complete.obs")
if(is.na(this_corr)){
return_vector[jj - x] = 0
}else{
return_vector[jj - x] = this_corr
}
}else{
return_vector[jj - x] = 0
}
}
return(list("return_vector" = return_vector))
})
stopCluster(cl)
cor_all[[method]][1, 1] = 1
for(jj in 1:length(return_list)){
cor_all[[method]][jj, (jj + 1): nrow(this_mat)] = return_list[[jj]][["return_vector"]]
cor_all[[method]][(jj + 1): nrow(this_mat), jj] = return_list[[jj]][["return_vector"]]
cor_all[[method]][(jj + 1), (jj + 1)] = 1
}
print(method)
}
saveRDS(cor_all, paste0(output_dir, "/cor_all.rds"))
cmd_result = c()
for(method in method_names){
cmd_result = c(cmd_result, calc_cmd(cor_all[["Raw"]], cor_all[[method]]))
}
names(cmd_result) = method_names
print(cmd_result)
barplot_usage(cmd_result, main = "CMD", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1)
method_names
barplot_usage(cmd_result, main = "CMD", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(0, 1))
pcc <- matrix(0, nrow(data_list[["Raw"]]),3)
colnames(pcc) <- c("gene","pearson_value","p_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
cor <- cor.test(x1, y1, method = "pearson", alternative="two.sided")
p_value <- cor$p.value
pearson_value <- as.numeric(cor[4])
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
pcc[i, 2] <- pearson_value
pcc[i, 3] <- p_value
}
if(i %% 1000 == 0){
print(i)
}
}
View(pcc)
index
pcc <- matrix(0, nrow(data_list[["Raw"]]),2)
colnames(pcc) <- c("gene","pearson_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
this_cor <- cor(x1, y1, method = "pearson", alternative="two.sided")
pearson_value <- as.numeric(this_cor[4])
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
pcc[i, 2] <- pearson_value
}
if(i %% 1000 == 0){
print(i)
}
}
cor
cor = stats::cor
cor(x1, y1, method = "pearson")
cor.test(x1, y1, method = "pearson", alternative = "two.sided")
cor.test(x1, y1, method = "pearson", alternative = "less")
cor.test(x1, y1, method = "pearson", alternative = "greater")
pcc <- matrix(0, nrow(data_list[["Raw"]]),2)
colnames(pcc) <- c("gene","pearson_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
pcc[i, 2] <- cor(x1, y1, method = "pearson")
}
if(i %% 1000 == 0){
print(i)
}
}
pcc <-pcc[which(pcc[,1]!="0"),]
mean(as.numeric(pcc[,2]))
cor.test(x1, y1, method = "pearson")
cor.test(x1, y1, method = "pearson", alternative = "two.sided")
cor(x1, y1, method = "pearson")
pcc <- matrix(0, nrow(data_list[["Raw"]]),2)
colnames(pcc) <- c("gene","pearson_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
pcc[i, 2] <- cor.test(x1, y1, method = "pearson", alternative = "two.sided")$cor
}
if(i %% 1000 == 0){
print(i)
}
}
cor.test(x1, y1, method = "pearson", alternative = "two.sided")$cor
cor.test(x1, y1, method = "pearson", alternative = "two.sided")
aaa = cor.test(x1, y1, method = "pearson", alternative = "two.sided")
aaa$estimate
pcc <- matrix(0, nrow(data_list[["Raw"]]),2)
colnames(pcc) <- c("gene","pearson_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
pcc[i, 2] <- cor.test(x1, y1, method = "pearson", alternative = "two.sided")$estimate
}
if(i %% 1000 == 0){
print(i)
}
}
pcc <-pcc[which(pcc[,1]!="0"),]
mean(as.numeric(pcc[,2]))
pcc <- matrix(0, nrow(data_list[["Raw"]]),2)
colnames(pcc) <- c("gene","pearson_value")
for(i in seq(nrow(data_list[["Raw"]]))){
x <- vector()
x <- as.numeric(data_list[["Raw"]][i,])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][i,])
y1 <-y[index]
pcc[i, 1] <- rownames(data_list[["Observed"]])[i]
#pcc[i, 2] <- cor.test(x1, y1, method = "pearson", alternative = "two.sided")$estimate
pcc[i, 2] <- cor(x1, y1, method = "pearson")
}
if(i %% 1000 == 0){
print(i)
}
}
pcc <-pcc[which(pcc[,1]!="0"),]
mean(as.numeric(pcc[,2]))
class(data_list[["Raw"]][1,])
mode(data_list[["Raw"]][1,])
data_list[["Raw"]][1,]
ii = 1
this_gene_expression = data_list[["Raw"]][ii,]
this_expressed_entries <-this_gene_expression[this_gene_expression != 0]
table(this_expressed_entries)
length(table(this_expressed_entries))
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
View(gene_correlation_mat)
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in method_names){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][ii,]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * length(cell_number))){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
barplot_usage(colMeans(gene_correlation_mat, na.rm = T), main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "Gene correlation with reference", cex.lab = 1.5, font.main = 1, ylim = c(0, 1))
barplot_usage(colMeans(gene_correlation_mat, na.rm = T), main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, decreasing = T, ylab = "Gene correlation with reference", cex.lab = 1.5, font.main = 1, ylim = c(0, 1))
View(gene_correlation_mat)
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in c("Observed")){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][ii, ]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * length(cell_number))){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in c("Observed")){
for(ii in seq(length(used_genes))){
raw_expression = data_list[["Raw"]][ii, ]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * length(cell_number))){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in c("Observed")){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][ii, ]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(unique(raw_expressed_entries)) != 1 & length(raw_expressed_entries) >= (0.1 * length(cell_number))){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in c("Observed")){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][ii, ]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * cell_number)){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
gene_correlation_mat = matrix(nrow = length(used_genes), ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_number = ncol(data_list[["Raw"]])
for(method in method_names){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][ii, ]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * cell_number)){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][ii, raw_expressed_mask], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
barplot_usage(colMeans(gene_correlation_mat, na.rm = T), main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, decreasing = T, ylab = "Gene correlation with reference", cex.lab = 1.5, font.main = 1, ylim = c(0, 1))
barplot_usage(cmd_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "CMD", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
barplot_usage(colMeans(gene_correlation_mat, na.rm = T), main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, decreasing = T, ylab = "Gene correlation with reference", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
gene_number = length(used_genes)
pcc <- matrix(0, ncol(data_list[["Raw"]]),3)
colnames(pcc) <- c("cell","pearson_value","p_value")
cnt_len <- ncol(data_list[["Raw"]])
for(i in 1:cnt_len){
x <- vector()
x <- as.numeric(data_list[["Raw"]][,i])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][,i])
y1 <-y[index]
pcc[i, 1] <- colnames(data_list[["Observed"]])[i]
pcc[i, 2] <- cor(x1, y1, method = "pearson")
}
if(i %% 1000 == 0){
print(i)
}
}
pcc <-pcc[which(pcc[,1]!="0"),]
mean(as.numeric(pcc[,2]))
cell_correlation_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(used_genes, method_names))
for(method in seq(cell_number)){
for(ii in used_genes){
raw_expression = data_list[["Raw"]][, ii]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * gene_number)){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][raw_expressed_mask, ii], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
cell_correlation_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(used_genes, method_names))
for(method in method_names){
for(ii in seq(cell_number)){
raw_expression = data_list[["Raw"]][, ii]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * gene_number)){
gene_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][raw_expressed_mask, ii], method = "pearson")
}
}
print(method)
}
print(colMeans(gene_correlation_mat, na.rm = T))
cell_correlation_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(used_genes, method_names))
cell_correlation_mat = matrix(nrow = cell_number, ncol = length(method_names), dimnames = list(c(), method_names))
for(method in method_names){
for(ii in seq(cell_number)){
raw_expression = data_list[["Raw"]][, ii]
raw_expressed_mask = raw_expression != 0
raw_expressed_entries = raw_expression[raw_expressed_mask]
if(length(table(raw_expressed_entries)) > 1 & length(raw_expressed_entries) >= (0.1 * gene_number)){
cell_correlation_mat[ii, method] <- cor(raw_expressed_entries, data_list[[method]][raw_expressed_mask, ii], method = "pearson")
}
}
print(method)
}
print(colMeans(cell_correlation_mat, na.rm = T))
pcc <- matrix(0, ncol(data_list[["Raw"]]),3)
colnames(pcc) <- c("cell","pearson_value","p_value")
cnt_len <- ncol(data_list[["Raw"]])
for(i in 1:cnt_len){
x <- vector()
x <- as.numeric(data_list[["Raw"]][,i])
index <-which(x!=0)
x1 <-x[index]
aa <-unique(x1)
if(length(aa)!=1 & length(x1) >=(0.1*length(x))){
y <- vector()
y <- as.numeric(data_list[["Observed"]][,i])
y1 <-y[index]
pcc[i, 1] <- colnames(data_list[["Observed"]])[i]
pcc[i, 2] <- cor(x1, y1, method = "pearson")
}
if(i %% 1000 == 0){
print(i)
}
}
pcc <-pcc[which(pcc[,1]!="0"),]
mean(as.numeric(pcc[,2]))
barplot_usage(colMeans(cell_correlation_mat, na.rm = T), main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, decreasing = T, ylab = "Cell correlation with reference", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
generic_functions_path = "./source/utility.r"
source(generic_functions_path)
raw_data = readh5_loom("./data/melanoma/raw.loom")
ds_dir = "./data/melanoma/ds_0.5"
dir.create(ds_dir, showWarnings = F, recursive = T)
#observed_data = downsampling_cell(0.5, raw_data)
#save_h5(paste0(ds_dir, "/observed.loom"), t(observed_data))
observed_data = readh5_loom(paste0(ds_dir, "/observed.loom"))
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
method_names = setdiff(names(data_list), "Raw")
method_color = c("gray80", "red", "blue4", "yellow4", "green", "purple", "cyan")
names(method_color) = method_names
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "gray80"
bar_color["DISC"] = "red"
output_dir = paste0(ds_dir, "/MAE")
dir.create(output_dir, showWarnings = F, recursive = T)
mae_gt0 = c()
mae_eq0 = c()
scale_factor = 1 / 0.5
for(this_method in method_names){
eq0 = sum(data_list[["Raw"]] > 0 & data_list[["Observed"]] == 0)
gt0 = sum(data_list[["Raw"]] > 0 & data_list[["Observed"]] > 0)
sae_gt0 = sum(sapply(used_genes, function(x){
expressed_mask = data_list[["Raw"]][x, ] > 0 & data_list[["Observed"]][x, ] > 0
return(sum(abs(data_list[["Raw"]][x, expressed_mask] - (data_list[[this_method]][x, expressed_mask] * scale_factor))))
}))
sae_eq0 = sum(sapply(used_genes, function(x){
expressed_mask = data_list[["Raw"]][x, ] > 0 & data_list[["Observed"]][x, ] == 0
return(sum(abs(data_list[["Raw"]][x, expressed_mask] - (data_list[[this_method]][x, expressed_mask] * scale_factor))))
}))
mae_gt0 = c(mae_gt0, sae_gt0 / gt0)
mae_eq0 = c(mae_eq0, sae_eq0 / eq0)
print(this_method)
}
names(mae_gt0) = method_names
names(mae_eq0) = method_names
barplot_usage(mae_eq0, main = "Zero entries", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "Log (MAE + 1)", cex.lab = 1.5, font.main = 1)
output_dir = paste0(ds_dir, "CMD")
dir.create(output_dir, showWarnings = F, recursive = T)
vst_file = paste0(output_dir, "/vst_gene.tsv")
if(file.exists(vst_file)){
hvg_info = read.table(vst_file)
print("load vst_file")
}else{
hvg_info = FindVariableFeatures_vst_by_genes(data_list[["Raw"]])
hvg_info = hvg_info[order(hvg_info$variance.standardized, decreasing = T), ]
write.table(hvg_info, paste0(output_dir, "/vst_gene.tsv"), sep = "\t", quote = F, row.names = T, col.names = T)
}
used_feature_genes = rownames(hvg_info)[1:300]
cor_all = list()
for(method in names(data_list)){
cor_all[[method]] = matrix(nrow = length(used_feature_genes), ncol = length(used_feature_genes), dimnames = list(used_feature_genes, used_feature_genes))
this_mat = delect_lt0.5(data_list[[method]])[used_feature_genes, ]
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, varlist = c("this_mat", "method"))
return_list = parLapply(cl, seq(nrow(this_mat) - 1), function(x){
return_vector = rep(NA, nrow(this_mat) - x)
ii_express = this_mat[x, ]
ii_mask = ii_express > 0
for(jj in (x + 1):nrow(this_mat)){
jj_express = this_mat[jj, ]
if(method %in% c("")){
express_mask = rep(T, length(ii_mask))
}else{
express_mask = ii_mask | jj_express > 0
}
if(sum(express_mask) > 0){
this_corr = cor(ii_express[express_mask], jj_express[express_mask], use = "pairwise.complete.obs")
if(is.na(this_corr)){
return_vector[jj - x] = 0
}else{
return_vector[jj - x] = this_corr
}
}else{
return_vector[jj - x] = 0
}
}
return(list("return_vector" = return_vector))
})
stopCluster(cl)
cor_all[[method]][1, 1] = 1
for(jj in 1:length(return_list)){
cor_all[[method]][jj, (jj + 1): nrow(this_mat)] = return_list[[jj]][["return_vector"]]
cor_all[[method]][(jj + 1): nrow(this_mat), jj] = return_list[[jj]][["return_vector"]]
cor_all[[method]][(jj + 1), (jj + 1)] = 1
}
print(method)
}
