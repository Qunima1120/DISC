gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
ds_dir = "./data/pbmc3k/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
aaa = readRDS("./data/pbmc3k/used_gene_names.rds")
aaa = readRDS("../data/pbmc3k/used_gene_names.rds")
sum(used_genes %in% aaa)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
utilities_path = "./source/utilities.r"
source(utilities_path)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
saveRDS(cell_type_identification$assignment, "./data/pbmc3k/cell_type.rds")
ds_dir = "./data/pbmc3k/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression_path = "./data/pbmc3k/pbmc3k_filtered.loom", gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./data/pbmc3k/cell_type.rds")
ds_dir = "./data/pbmc3k/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
dim(data_list[[ii]])
length(cell_type)
head(cell_type)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./data/pbmc3k/cell_type.rds")
head(cell_type)
ds_dir = "./data/pbmc3k/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
length(cell_type)
head(cell_type)
data_list[[ii]][1:5, 1:5]
seurat_clustering = function(expression = NULL, feature = NULL, expression_path = NULL, feature_path = NULL,
cell_type_identification_fun = NULL, cell_type = NULL, gene_selection_rds = NULL,
output_dir = NULL, pca_dim = 50, res = 1.4, min_pct = 0.1, show_plots = FALSE, save_plots = TRUE){
if(!xor(is.null(expression), is.null(expression_path))){
stop("Either expression or expression_path should be provided!")
}
if(is.null(expression_path)){
gene_bc_mat = expression
output_dir_candidate = NULL
}else{
if(is.null(feature_path) & is.null(feature)){
output_dir_candidate = paste(c(delete_last_element(unlist(strsplit(expression_path, "/", fixed = T))), "cluster_evaluation", get_last_element(delete_last_element(unlist(strsplit(expression_path, "[/\\.]", perl = T)))), "pca"), collapse = "/")
}else{
output_dir_candidate = paste(c(delete_last_element(unlist(strsplit(expression_path, "/", fixed = T))), "cluster_evaluation", get_last_element(delete_last_element(unlist(strsplit(expression_path, "[/\\.]", perl = T)))), "feature"), collapse = "/")
if(is.null(feature)){
cell.embeddings = t(readh5_loom(feature_path, is_feature = TRUE))
}else{
cell.embeddings = t(feature_path)
}
}
gene_bc_mat = get_gene_bc_mat(expression_path)
}
if(is.null(output_dir)){
output_dir = output_dir_candidate
}
if(!is.null(gene_selection_rds)){
gene_bc_mat = gene_bc_mat[gsub("_", "-", rownames(gene_bc_mat)) %in% readRDS(gene_selection_rds), ]
}
seurat_obj = CreateSeuratObject(as.data.frame(gene_bc_mat))
seurat_obj <- NormalizeData(object = seurat_obj)
if(!is.null(output_dir)){
dir.create(output_dir, showWarnings = F, recursive = T)
}else{
save_plots = FALSE
}
if(is.null(feature_path)){
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(object = seurat_obj, verbose = !show_plots)
pca_dim_use = min(c(pca_dim * 2, nrow(gene_bc_mat)))
seurat_obj <- RunPCA(object = seurat_obj, npcs = pca_dim_use)
tmp_plot = ElbowPlot(seurat_obj, ndims = pca_dim_use)
if(show_plots){
print(tmp_plot)
}
if(save_plots){
ggsave(plot = tmp_plot, filename = paste0(output_dir, "/elbow.pdf"), height = 8, width = 11)
}
}else{
seurat_obj@reductions = list()
seurat_obj@reductions[["pca"]] = Seurat:::DimReduc(cell.embeddings = cell.embeddings, assay.used = "RNA", key = "feature_")
pca_dim = ncol(cell.embeddings)
}
seurat_obj <- RunTSNE(seurat_obj, dims = 1:pca_dim, tsne.method = "Rtsne", check_duplicates = FALSE)
seurat_obj = RunUMAP(seurat_obj, dims = 1:pca_dim)
if(!is.null(cell_type)){
cell_type = cell_type[colnames(gene_bc_mat) %in% cell_type]
print(names(cell_type))
plot_seurat_obj = subset(seurat_obj, cells = names(cell_type))
plot_seurat_obj@active.ident = factor(cell_type, levels = sort(unique(cell_type)))
tmp_plot = TSNEPlot(plot_seurat_obj)
if(show_plots){
print(tmp_plot)
}
if(save_plots){
ggsave(plot = tmp_plot, filename = paste0(output_dir, "/tsne_cell_type.pdf"), height = 8, width = 11)
}
tmp_plot = UMAPPlot(plot_seurat_obj)
if(show_plots){
print(tmp_plot)
}
if(save_plots){
ggsave(plot = tmp_plot, filename = paste0(output_dir, "/umap_cell_type.pdf"), height = 8, width = 11)
}
}
seurat_obj <- FindNeighbors(object = seurat_obj, dims = 1:pca_dim, force.recalc = TRUE)
seurat_obj <- FindClusters(object = seurat_obj, resolution = res)
tmp_plot = TSNEPlot(seurat_obj)
if(show_plots){
print(tmp_plot)
}
if(save_plots){
ggsave(plot = tmp_plot, filename = paste0(output_dir, "/tsne_cluster.pdf"), height = 8, width = 11)
}
tmp_plot = UMAPPlot(seurat_obj)
if(show_plots){
print(tmp_plot)
}
if(save_plots){
ggsave(plot = tmp_plot, filename = paste0(output_dir, "/umap_cluster.pdf"), height = 8, width = 11)
}
this_metadata = seurat_obj@meta.data
if(!is.null(output_dir)){
write.table(this_metadata, paste0(output_dir, "/metadata.txt"), row.names = T, col.names = T, quote = F)
}
this_markers <- FindAllMarkers(object = seurat_obj, only.pos = TRUE, min.pct = min_pct, logfc.threshold = 0.25, verbose = !show_plots)
if(!is.null(output_dir)){
write.table(this_markers, paste0(output_dir, "/markers.txt"), row.names = T, col.names = T, quote = F)
write.table(seurat_obj@active.ident, paste0(output_dir, "/cluster_cell_type.txt"), row.names = T, col.names = F, quote = F)
cluster_cell_type = seurat_obj@active.ident
save(this_markers, this_metadata, cluster_cell_type, file = paste0(output_dir, "/tmp.rdata"))
}
if(!is.null(cell_type_identification_fun)){
return(cell_type_identification_fun(this_markers, this_metadata, prior_cell_type = cell_type))
}
}
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
cell_type[colnames(gene_bc_mat) %in% cell_type]
cell_type[colnames(data_list[[ii]]) %in% cell_type]
head(cell_type)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/pbmc3k/pbmc3k_filtered.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/pbmc3k"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/pbmc3k/pbmc3k.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./data/pbmc3k/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/pbmc3k/pbmc3k_filtered.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/pbmc3k/pbmc3k_filtered.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./data/pbmc3k/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./data/pbmc3k/cell_type.rds")
ds_dir = "./data/pbmc3k/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
utilities_path = "./source/utilities.r"
source(utilities_path)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
acc_result
ari_result
