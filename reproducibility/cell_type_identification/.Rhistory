barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1))
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
acc_result
ari_result
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/PBMC/raw.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/PBMC"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/PBMC/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./results/PBMC/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/PBMC/raw.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/PBMC/raw.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./results/PBMC/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/PBMC/raw.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/PBMC"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/PBMC/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./results/PBMC/used_gene_names.rds")
raw_data = original_data[, keep_cell_names]
save_h5("./data/PBMC/raw.loom", as.matrix(t(raw_data)))
}else{
raw_data = readh5_loom("./data/PBMC/raw.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./results/PBMC/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./results/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/PBMC/raw.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/PBMC"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/PBMC/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./results/PBMC/used_gene_names.rds")
raw_data = as.matrix(original_data[, keep_cell_names])
save_h5("./data/PBMC/raw.loom", t(raw_data))
}else{
raw_data = readh5_loom("./data/PBMC/raw.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./results/PBMC/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./results/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/PBMC/raw.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/PBMC"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/PBMC/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./results/PBMC/used_gene_names.rds")
raw_data = as.matrix(original_data[, keep_cell_names])
save_h5("./data/PBMC/raw.loom", t(raw_data))
}else{
raw_data = readh5_loom("./data/PBMC/raw.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./results/PBMC/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./results/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
f1_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
acc_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
View(jaccard_mat)
jaccard_df = as(jaccard_mat, "dgTMatrix")
View(jaccard_mat)
View(jaccard_df)
jaccard_df = melt(as.data.frame(jaccard_mat))
jaccard_df = reshape2::melt(as.data.frame(jaccard_mat))
View(jaccard_df)
jaccard_mat
as.data.frame(jaccard_mat)
reshape2::melt(as.data.frame(jaccard_mat))
jaccard_df = reshape2::melt(jaccard_mat)
jaccard_df
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value))+ geom_tile()+ labs(x="Method", y = "Cell Type") + theme_classic()
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile()+
labs(x="Method", y = "Cell Type") + theme_classic() +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1, face = "bold"))+theme(axis.text.y = element_text(size = 12, hjust = 1, vjust = 1, face = "bold")) +
scale_fill_gradient(low='white',high='red')+theme(legend.title=element_blank()) +geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4)
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1),
legend.title = element_text(), title = "Jaccard")
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
geom_tile("Jaccard")
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1),
legend.title = element_text())
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle("Jaccard") +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1),
legend.title = element_text())
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle("Jaccard") +
theme(axis.text.x = element_text(size = 12,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 12, hjust = 1, vjust = 1),
legend.title = element_text(), plot.title = element_text(size=14, face="bold", ))
ggplot(data = jaccard_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle("Jaccard") +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
jaccard_mat
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
f1_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
acc_mat = matrix(nrow = length(unique_cell_type), ncol = length(cell_type_identification_result_list), dimnames = list(unique_cell_type, names(cell_type_identification_result_list)))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[, ii] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/PBMC/raw.loom")){
temp <- tempfile()
download.file("https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/PBMC"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_gene_bc_matrices/hg19/"))
save_h5("./data/PBMC/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.cells = 3, min.features = 200)
seurat_obj[["percent.mt"]] <- PercentageFeatureSet(seurat_obj, pattern = "^MT-")
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
keep_cell_names = colnames(seurat_obj[["RNA"]]@counts)
keep_gene_names = rownames(seurat_obj[["RNA"]]@counts)
saveRDS(keep_gene_names, "./results/PBMC/used_gene_names.rds")
raw_data = as.matrix(original_data[, keep_cell_names])
save_h5("./data/PBMC/raw.loom", t(raw_data))
}else{
raw_data = readh5_loom("./data/PBMC/raw.loom")
}
cell_type_identification = seurat_clustering(expression = raw_data, gene_selection_rds = "./results/PBMC/used_gene_names.rds", pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
cell_type= cell_type_identification$assignment
saveRDS(cell_type, "./results/PBMC/cell_type.rds")
ds_dir = "./data/PBMC/ds_0.3"
dir.create(ds_dir, showWarnings = F, recursive = T)
observed_path = paste0(ds_dir, "/observed.loom")
if(!file.exists(observed_path)){
observed_data = downsampling_cell(0.3, raw_data)
save_h5(observed_path, t(observed_data))
}else{
observed_data = readh5_loom(observed_path)
}
expressed_cell = rowSums(observed_data > 0)
gene_expression = rowSums(observed_data)
gene_filter = expressed_cell >= 10 & gene_expression > expressed_cell * 1
raw_data = raw_data[gene_filter, ]
observed_data = observed_data[gene_filter, ]
used_genes = rownames(observed_data)
print(dim(raw_data))
print(dim(observed_data))
data_list = list(Raw = raw_data, Observed = observed_data)
rm(raw_data, observed_data)
data_list[["DISC"]] = readh5_imputation(paste0(ds_dir, "/DISC.hdf5"), with_outliers = T)[used_genes, ]
print(dim(data_list[["DISC"]]))
data_list[["SAVER"]] = readh5_imputation(paste0(ds_dir, "/SAVER.hdf5"))
data_list[["MAGIC"]] = readh5_imputation(paste0(ds_dir, "/MAGIC.hdf5"))
data_list[["DCA"]] = readh5_imputation(paste0(ds_dir, "/DCA.hdf5"))
data_list[["scScope"]] = readh5_imputation(paste0(ds_dir, "/scScope.hdf5"))
data_list[["scVI"]] = readh5_imputation(paste0(ds_dir, "/scVI.hdf5"))
cell_number = ncol(data_list[["Raw"]])
gene_number = length(used_genes)
cell_type_identification_result_list = list()
for(ii in names(data_list)){
cell_type_identification_result_list[[ii]] = seurat_clustering(expression = data_list[[ii]], cell_type = cell_type, pca_dim = 10, res = 0.5, min_pct = 0.25, show = T, cell_type_identification_fun = cell_type_identification_pbmc)
}
acc_result = rep(NA, length(cell_type_identification_result_list))
names(acc_result) = names(cell_type_identification_result_list)
ari_result = rep(NA, length(cell_type_identification_result_list))
names(ari_result) = names(cell_type_identification_result_list)
for(ii in names(cell_type_identification_result_list)){
acc_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ACC"]
ari_result[ii] = cell_type_identification_result_list[[ii]][["summary"]]["ARI"]
}
method_names = names(cell_type_identification_result_list)
text_color = rep("black", length(method_names))
names(text_color) = method_names
text_color["DISC"] = "red"
bar_color = rep("gray50", length(method_names))
names(bar_color) = method_names
bar_color["Raw"] = "white"
bar_color["Observed"] = "gray80"
bar_color["DISC"] = "red"
barplot_usage(acc_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ACC", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
barplot_usage(ari_result, main = "", cex.main = 1.5, bar_color = bar_color, text_color = text_color, use_data_order = T, ylab = "ARI", cex.lab = 1.5, font.main = 1, ylim = c(-0.1, 1), decreasing = TRUE)
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
acc_result
ari_result
cell_type_heatmap = function(method_type_mat, title){
ggplot(data = melt(method_type_mat), aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(Var1)))
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap = function(method_type_mat, title){
ggplot(data = melt(method_type_mat), aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_reverse()
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
cell_type_heatmap = function(method_type_mat, title){
ggplot(data = melt(method_type_mat), aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_reverse() +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap = function(method_type_mat, title){
ggplot(data = melt(method_type_mat), aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap = function(method_type_mat, title){
plot_df = melt(method_type_mat)
ggplot(data = plot_df, aes(x = Var2, y = Var1, fill = value)) + geom_tile() +
labs(x="Method", y = "Cell Type") + theme_classic() +
scale_fill_gradient(low='white',high='red') + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 4) +
ggtitle(title) + scale_y_discrete(limits = rev(levels(plot_df$Var1))) +
theme(axis.text.x = element_text(size = 10,angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10, hjust = 1, vjust = 1),
axis.title = element_text(size=12, face="bold"),
legend.title = element_blank(),
plot.title = element_text(size=14, face="bold"))
}
unique_cell_type = unique(cell_type)
jaccard_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
f1_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
acc_mat = matrix(ncol = length(unique_cell_type), nrow = length(cell_type_identification_result_list), dimnames = list(names(cell_type_identification_result_list), unique_cell_type))
for(ii in names(cell_type_identification_result_list)){
jaccard_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "Jaccard"]
f1_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "F1-score"]
acc_mat[ii, ] = cell_type_identification_result_list[[ii]][["cell_type_result"]][, "ACC"]
}
cell_type_heatmap(jaccard_mat, "Jaccard")
cell_type_heatmap(f1_mat, "F1-score")
cell_type_heatmap(acc_mat, "ACC")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
gene_bc_mat = as.matrix(read.csv("./data/CBMC/original_data/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",", strip.white = T, row.names = 1))
