knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
mapping_rds = "./data/hg19/geneid_genename.rds"
if(file.exists(mapping_rds)){
mapping_vector = readRDS(mapping_rds)
print("load mapping_rds")
}else{
gz_path = "./data/hg19/Homo_sapiens.GRCh37.87.gtf.gz"
mapping = get_map(gz_path)
mapping_vector = mapping[, 2]
names(mapping_vector) = mapping[, 1]
saveRDS(object = mapping_vector, file = mapping_rds)
}
bulk_all = as.matrix(read.table("./data/MELANOMA/original_data/bulk/GSE97681_wm9LdB_star_HTSeqCounts_full.tsv.gz", header = T, sep = "\t"))
bulk_a6_mat = bulk_all[bulk_all[, "sampleID"] == "A6_bulk_NoDrug", ]
idConversionTable <- read.table ( "./data/MELANOMA/original_data/bulk/original_study/mart_export.txt" , header = T , as.is = T , fill = T , sep = '\t' , row.names = 1 )
idConversionTable <- subset ( idConversionTable, subset = rownames ( idConversionTable ) %in% bulk_a6_mat[, "gene_id"] )
# 56885 of these.
# Remove duplicated symbols
dups <- unique ( idConversionTable$Associated.Gene.Name [ duplicated ( idConversionTable$Associated.Gene.Name ) ] )
# 668 of these
keep <- ! ( idConversionTable$Associated.Gene.Name %in% dups )
idConversionTable <- subset ( idConversionTable , subset = keep )
mapping_vector1 = idConversionTable[, 1]
names(mapping_vector1) = rownames(idConversionTable)
subset_a6 = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPMSubset.txt"))
bulk_a6_original = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPM.txt"))
bulk_a6 = as.numeric(bulk_a6_mat[, "counts"])
names(bulk_a6) = mapping_vector[bulk_a6_mat[, "gene_id"]]
bulk_a6_filt = bulk_a6[!is.na(names(bulk_a6))]
bulk_a6_rpm_redo = bulk_a6_filt / sum(bulk_a6_filt) * 1000000
bulk_a6_rpm_redo_subset = bulk_a6_rpm_redo[names(bulk_a6_rpm_redo) %in% colnames(subset_a6)]
print(bulk_a6_rpm_subset)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
mapping_rds = "./data/hg19/geneid_genename.rds"
if(file.exists(mapping_rds)){
mapping_vector = readRDS(mapping_rds)
print("load mapping_rds")
}else{
gz_path = "./data/hg19/Homo_sapiens.GRCh37.87.gtf.gz"
mapping = get_map(gz_path)
mapping_vector = mapping[, 2]
names(mapping_vector) = mapping[, 1]
saveRDS(object = mapping_vector, file = mapping_rds)
}
bulk_all = as.matrix(read.table("./data/MELANOMA/original_data/bulk/GSE97681_wm9LdB_star_HTSeqCounts_full.tsv.gz", header = T, sep = "\t"))
bulk_a6_mat = bulk_all[bulk_all[, "sampleID"] == "A6_bulk_NoDrug", ]
idConversionTable <- read.table ( "./data/MELANOMA/original_data/bulk/original_study/mart_export.txt" , header = T , as.is = T , fill = T , sep = '\t' , row.names = 1 )
idConversionTable <- subset ( idConversionTable, subset = rownames ( idConversionTable ) %in% bulk_a6_mat[, "gene_id"] )
# 56885 of these.
# Remove duplicated symbols
dups <- unique ( idConversionTable$Associated.Gene.Name [ duplicated ( idConversionTable$Associated.Gene.Name ) ] )
# 668 of these
keep <- ! ( idConversionTable$Associated.Gene.Name %in% dups )
idConversionTable <- subset ( idConversionTable , subset = keep )
mapping_vector1 = idConversionTable[, 1]
names(mapping_vector1) = rownames(idConversionTable)
subset_a6 = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPMSubset.txt"))
bulk_a6_original = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPM.txt"))
bulk_a6 = as.numeric(bulk_a6_mat[, "counts"])
names(bulk_a6) = mapping_vector[bulk_a6_mat[, "gene_id"]]
bulk_a6_filt = bulk_a6[!is.na(names(bulk_a6))]
bulk_a6_rpm_redo = bulk_a6_filt / sum(bulk_a6_filt) * 1000000
bulk_a6_rpm_redo_subset = bulk_a6_rpm_redo[names(bulk_a6_rpm_redo) %in% colnames(subset_a6)]
print(bulk_a6_rpm_redo_subset)
print(subset_a6[1, names(bulk_a6_rpm_redo_subset)])
print(bulk_a6_original[names(bulk_a6_rpm_redo_subset), 1])
bulk_a6_1 = as.numeric(bulk_a6_mat[, "counts"])
names(bulk_a6_1) = mapping_vector1[bulk_a6_mat[, "gene_id"]]
bulk_a6_filt_1 = bulk_a6_1[!is.na(names(bulk_a6_1))]
bulk_a6_rpm_redo_1 = bulk_a6_filt_1 / sum(bulk_a6_filt_1) * 1000000
bulk_a6_rpm_redo_subset_1 = bulk_a6_rpm_redo_1[names(bulk_a6_rpm_redo_1) %in% colnames(subset_a6)]
print(bulk_a6_rpm_redo_subset_1)
print(subset_a6[1, names(bulk_a6_rpm_subset)])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
mapping_rds = "./data/hg19/geneid_genename.rds"
if(file.exists(mapping_rds)){
mapping_vector = readRDS(mapping_rds)
print("load mapping_rds")
}else{
gz_path = "./data/hg19/Homo_sapiens.GRCh37.87.gtf.gz"
mapping = get_map(gz_path)
mapping_vector = mapping[, 2]
names(mapping_vector) = mapping[, 1]
saveRDS(object = mapping_vector, file = mapping_rds)
}
bulk_all = as.matrix(read.table("./data/MELANOMA/original_data/bulk/GSE97681_wm9LdB_star_HTSeqCounts_full.tsv.gz", header = T, sep = "\t"))
bulk_a6_mat = bulk_all[bulk_all[, "sampleID"] == "A6_bulk_NoDrug", ]
idConversionTable <- read.table ( "./data/MELANOMA/original_data/bulk/original_study/mart_export.txt" , header = T , as.is = T , fill = T , sep = '\t' , row.names = 1 )
idConversionTable <- subset ( idConversionTable, subset = rownames ( idConversionTable ) %in% bulk_a6_mat[, "gene_id"] )
# 56885 of these.
# Remove duplicated symbols
dups <- unique ( idConversionTable$Associated.Gene.Name [ duplicated ( idConversionTable$Associated.Gene.Name ) ] )
# 668 of these
keep <- ! ( idConversionTable$Associated.Gene.Name %in% dups )
idConversionTable <- subset ( idConversionTable , subset = keep )
mapping_vector1 = idConversionTable[, 1]
names(mapping_vector1) = rownames(idConversionTable)
subset_a6 = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPMSubset.txt"))
bulk_a6_original = as.matrix(read.table("./data/MELANOMA/original_data/bulk/original_study/BulkRPM.txt"))
bulk_a6 = as.numeric(bulk_a6_mat[, "counts"])
names(bulk_a6) = mapping_vector[bulk_a6_mat[, "gene_id"]]
bulk_a6_filt = bulk_a6[!is.na(names(bulk_a6))]
bulk_a6_rpm_redo = bulk_a6_filt / sum(bulk_a6_filt) * 1000000
bulk_a6_rpm_redo_subset = bulk_a6_rpm_redo[names(bulk_a6_rpm_redo) %in% colnames(subset_a6)]
print(bulk_a6_rpm_redo_subset)
print(subset_a6[1, names(bulk_a6_rpm_redo_subset)])
print(bulk_a6_original[names(bulk_a6_rpm_redo_subset), 1])
bulk_a6_1 = as.numeric(bulk_a6_mat[, "counts"])
names(bulk_a6_1) = mapping_vector1[bulk_a6_mat[, "gene_id"]]
bulk_a6_filt_1 = bulk_a6_1[!is.na(names(bulk_a6_1))]
bulk_a6_rpm_redo_1 = bulk_a6_filt_1 / sum(bulk_a6_filt_1) * 1000000
bulk_a6_rpm_redo_subset_1 = bulk_a6_rpm_redo_1[names(bulk_a6_rpm_redo_1) %in% colnames(subset_a6)]
print(bulk_a6_rpm_redo_subset_1)
print(subset_a6[1, names(bulk_a6_rpm_redo_subset)])
print(bulk_a6_original[names(bulk_a6_rpm_redo_subset), 1])
print(sum(bulk_a6_rpm_redo_1 != bulk_a6_original[names(bulk_a6_rpm_redo_1), 1]))
print(head(bulk_a6_rpm_redo_1[bulk_a6_rpm_redo_1 != bulk_a6_original[names(bulk_a6_rpm_redo_1), 1]]))
print(head(bulk_a6_original[names(bulk_a6_rpm_redo_1), 1][bulk_a6_rpm_redo_1 != bulk_a6_original[names(bulk_a6_rpm_redo_1), 1]]))
print(sum(bulk_a6_rpm_redo_1 - bulk_a6_original[names(bulk_a6_rpm_redo_1), 1]))
print(head(bulk_a6_original[, 1]))
saveRDS(bulk_a6_original[, 1], "./data/MELANOMA/BulkRPM.rds")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="D:/github_repositories/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir="E:/DISC/reproducibility")
utilities_path = "./source/utilities.r"
source(utilities_path)
if(!file.exists("./data/JURKAT/raw.loom")){
temp <- tempfile()
download.file("http://cf.10xgenomics.com/samples/cell-exp/1.1.0/jurkat/jurkat_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/JURKAT"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_matrices_mex/hg19/"))
save_h5("./data/JURKAT/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.features = 500)
cell_names_JURKAT = colnames(seurat_obj[["RNA"]]@counts)
gene_names_JURKAT = rownames(original_data)
raw_data_JURKAT = as.matrix(original_data[, cell_names_JURKAT])
save_h5("./data/JURKAT/raw.loom", t(raw_data_JURKAT))
}else{
raw_data_JURKAT = readh5_loom("./data/JURKAT/raw.loom")
cell_names_JURKAT = colnames(raw_data_JURKAT)
gene_names_JURKAT = rownames(raw_data_JURKAT)
}
print(dim(raw_data_JURKAT))
print("JURKAT...OK!")
if(!file.exists("./data/293T/raw.loom")){
temp <- tempfile()
download.file("http://cf.10xgenomics.com/samples/cell-exp/1.1.0/293t/293t_filtered_gene_bc_matrices.tar.gz", temp)
exdir = "./data/293T"
untar(temp, exdir = exdir)
unlink(temp)
original_data <- Read10X(data.dir = paste0(exdir, "/filtered_matrices_mex/hg19/"))
save_h5("./data/293T/original.loom", as.matrix(t(original_data)))
seurat_obj <- CreateSeuratObject(counts = as.data.frame(original_data), min.features = 500)
cell_names_293T = colnames(seurat_obj[["RNA"]]@counts)
gene_names_293T = rownames(original_data)
raw_data_293T = as.matrix(original_data[, cell_names_293T])
save_h5("./data/293T/raw.loom", t(raw_data_293T))
}else{
raw_data_293T = readh5_loom("./data/293T/raw.loom")
cell_names_293T = colnames(raw_data_293T)
gene_names_293T = rownames(raw_data_293T)
}
print(dim(raw_data_293T))
print("293T...OK!")
if(!file.exists("./data/JURKAT_293T/raw.loom")){
dir.create("./data/JURKAT_293T", showWarnings = F)
gene_names_JURKAT_293T = unique(c(gene_names_JURKAT, gene_names_293T))
raw_data_JURKAT_293T = matrix(0, nrow = length(gene_names_JURKAT_293T), ncol = ncol(raw_data_JURKAT) + ncol(raw_data_293T), dimnames = list(gene_names_JURKAT_293T, c(cell_names_JURKAT, cell_names_293T)))
raw_data_JURKAT_293T[gene_names_JURKAT, cell_names_JURKAT] = raw_data_JURKAT
raw_data_JURKAT_293T[gene_names_293T, cell_names_293T] = raw_data_293T
save_h5("./data/JURKAT_293T/raw.loom", t(raw_data_JURKAT_293T))
}else{
raw_data_JURKAT_293T = readh5_loom("./data/JURKAT_293T/raw.loom")
}
print(dim(raw_data_JURKAT_293T))
print("JURKAT_293T...OK!")
